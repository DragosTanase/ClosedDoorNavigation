package com.example.uisimplu;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import java.util.ArrayList;
import java.util.List;

public class Canvas extends View
{
    private Paint mPaintPP;
    private Paint mPaint;
    private Paint mStrokePaint;
    private Path mArrowPath;
    protected android.graphics.Canvas canvas;
    private int cR = 5; //circle radius
    private int arrowR = 10; //arrow range
    private float mCurX = 100;
    private float mCurY = 600;

    private int mOrient;

    private List<PointF> mPointList = new ArrayList<>();
    private List<PointF> mPointPP = new ArrayList<>();
    public Canvas(Context context)
    {
        this(context, null);
    }
    public Canvas(Context context, AttributeSet attrs)
    {
        this(context, attrs, 0);
    }

    public Canvas(Context context, AttributeSet attrs, int defStyleAttr)
    {
        super(context, attrs, defStyleAttr);
        mPaint = new Paint();
        mPaint.setColor(Color.BLUE);
        mPaint.setAntiAlias(true);
        mPaint.setStyle(Paint.Style.FILL);

        mStrokePaint = new Paint(mPaint);
        mStrokePaint.setStyle(Paint.Style.STROKE);
        mStrokePaint.setStrokeWidth(5);

        mPaintPP = new Paint();
        mPaintPP.setColor(Color.RED);
        mPaintPP.setAntiAlias(true);
        mPaintPP.setStyle(Paint.Style.FILL);

        mArrowPath = new Path();
        mArrowPath.arcTo(new RectF(-arrowR, -arrowR, arrowR, arrowR), 0, -180);
        mArrowPath.lineTo(0, -3 * arrowR);
        mArrowPath.close();
    }
    @Override
    protected void onDraw(android.graphics.Canvas canvas)
    {

        for (PointF p : mPointList)
        {
            canvas.drawCircle(p.x, p.y, cR, mPaint);
        }
        setCanvas(canvas);

        canvas.save();
        canvas.translate(mCurX, mCurY);
        canvas.rotate(mOrient);
        canvas.drawPath(mArrowPath, mPaint);
        canvas.drawArc(new RectF(-arrowR * 0.8f, -arrowR * 0.8f, arrowR * 0.8f, arrowR * 0.8f), 0, 360, false, mStrokePaint);
        canvas.restore();

    }

    public void drawPP()
    {

        mPointPP.add(new PointF(mCurX, mCurY));
        for (PointF p : mPointPP)
        {
            canvas.drawCircle(p.x, p.y, 15, mPaintPP);
        }

        canvas.save();

    }
    @Override
    public boolean onTouchEvent(MotionEvent event)
    {
        mCurX = event.getX();
        mCurY = event.getY();
        invalidate();
        return true;
    }
    public void autoAddPoint(float stepLen)
    {
        mCurX += (float) (stepLen * Math.sin(Math.toRadians(mOrient)));
        mCurY += -(float) (stepLen * Math.cos(Math.toRadians(mOrient)));
        mPointList.add(new PointF(mCurX, mCurY));

        invalidate();
    }
    public void autoDrawArrow(int orient)
    {
        mOrient = orient;
        invalidate();
    }

    public void setCanvas(android.graphics.Canvas canvas) {
        this.canvas = canvas;
    }

    public android.graphics.Canvas getCanvas() {
        return canvas;
    }
}
