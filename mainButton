 Button startBtn = findViewById(R.id.startBtn);

            startBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (ok) {
                    startBtn.setText("STOP");
                    ok = false;
                    accelerometer.mSensorManager.registerListener(accelerometer.sensorEventListener, accelerometer.mAccelerator, SensorManager.SENSOR_DELAY_NORMAL);
//                    stepCounter.msensorManager.registerListener(stepCounter.sensorEventListener, stepCounter.mStepCounter, SensorManager.SENSOR_DELAY_NORMAL);
                    barometer.sensorManager.registerListener(barometer.sensorEventListener, barometer.pressureSensor, SensorManager.SENSOR_DELAY_UI);
                    gyroscope.mSensorManager.registerListener(gyroscope.sensorEventListener, gyroscope.mGyroscope, SensorManager.SENSOR_DELAY_NORMAL);
                    magnetometer.magSensorManager.registerListener(magnetometer.sensorEventListener, magnetometer.magSensor, SensorManager.SENSOR_DELAY_NORMAL);
                    registerReceiver(bluetooth.receiver, new IntentFilter(BluetoothDevice.ACTION_FOUND));
                    if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED
                            && (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {
                        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, 1);
                    }
                    gps.locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, (LocationListener) MainActivity.this);

                    //Mobile Data
                    mobileData.telephoneManager.listen(pslistener, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
                    SignalStrength signalStrength = mobileData.telephoneManager.getSignalStrength();
                    pslistener.onSignalStrengthsChanged(signalStrength);

                    //Wifi
                    Handler mainHandler = new Handler(Looper.getMainLooper());
                    final Runnable r = new Runnable() {
                        @Override
                        public void run() {
                            wifiSignal.displayWifiData();
                            mainHandler.postDelayed(this, 1000);
                        }
                    };
                    mainHandler.postDelayed(r, 1);


                    Handler startRecHandler = new Handler(Looper.getMainLooper());
                    startRecHandler.postDelayed(new Runnable(){
                        //save start point
                        public void run(){
                            Log.d("handler","save data start");
                            String entry = "\n" + barometer.pressure +"," + accelerometer.zAccelerometer ;
                            try {

                                senzor.writeCSV("/start.csv", "data" + "," + "x_acc", entry);
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            }
                        }
                    }, 1000);


                } else {
                    //handler save 5 sec csv
                    //unregister
                    startBtn.setText("START");
                    ok = true;

                    //save stop point
                    Handler stopRecHandler = new Handler(Looper.getMainLooper());
                    stopRecHandler.postDelayed(new Runnable(){
                        //save in csv
                        public void run(){
                            Log.d("handler","save data stop");

                            String entry = "\n" + String.format("%.3f", barometer.pressure) + String.format("%.2f", accelerometer.xAccelerometer) + String.format("%.2f", accelerometer.yAccelerometer)  + String.format("%.2f", accelerometer.zAccelerometer) ;

                            try {
                                senzor.writeCSV("/stop.csv", "", entry);
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            }
                        }
                    }, 10);

                    accelerometer.mSensorManager.unregisterListener(accelerometer.sensorEventListener, accelerometer.mAccelerator);
//                    stepCounter.msensorManager.unregisterListener(stepCounter.sensorEventListener, stepCounter.mStepCounter);
                    barometer.sensorManager.unregisterListener(barometer.sensorEventListener, barometer.pressureSensor);
                    gyroscope.mSensorManager.unregisterListener(gyroscope.sensorEventListener, gyroscope.mGyroscope);
                    magnetometer.magSensorManager.unregisterListener(magnetometer.sensorEventListener, magnetometer.magSensor);
                    gps.locationManager.removeUpdates((LocationListener) MainActivity.this);
                    unregisterReceiver(bluetooth.receiver);
                    mobileData.telephoneManager.listen(pslistener,PhoneStateListener.LISTEN_NONE);
                    Handler mainHandler = new Handler(Looper.getMainLooper());
                    final Runnable r = new Runnable() {
                        @Override
                        public void run() {
                            wifiSignal.displayWifiData();
                            mainHandler.postDelayed(this, 1000);
                        }
                    };
                    mainHandler.postDelayed(r, 1000);
                    mainHandler.removeCallbacks(r);
                    bluHandler.removeCallbacks(r2);
                }
            }
        });
